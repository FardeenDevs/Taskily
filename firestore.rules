/**
 * @fileoverview Firestore Security Rules for Task Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * read and write their own profile data and data within their workspaces.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/workspaces/{workspaceId}: Workspaces owned by a specific user.
 * - /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}: Tasks within a workspace, owned by the workspace owner.
 * - /users/{userId}/workspaces/{workspaceId}/notes/{noteId}: Notes within a workspace, owned by the workspace owner.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Users can only access workspaces, tasks and notes that are part of their data tree.
 * - Data model favors strict ownership; shared access is not supported.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != userId
     * @deny (delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own workspaces.
     * @path /users/{userId}/workspaces/{workspaceId}
     * @allow (get, list, create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == resource.data.ownerId
     * @deny (get) if request.auth.uid != userId
     * @deny (list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != resource.data.ownerId
     * @deny (delete) if request.auth.uid != resource.data.ownerId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workspaces/{workspaceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.ownerId == request.auth.uid;
      allow delete: if isOwner(userId) && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows a workspace owner to manage tasks within their workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}
     * @allow (get, list, create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != userId
     * @deny (delete) if request.auth.uid != userId
     * @principle Enforces workspace ownership for all task operations.
     */
    match /users/{userId}/workspaces/{workspaceId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a workspace owner to manage notes within their workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/notes/{noteId}
     * @allow (get, list, create) if request.auth.uid == userId
     * @allow (update, delete) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (list) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != userId
     * @deny (delete) if request.auth.uid != userId
     * @principle Enforces workspace ownership for all note operations.
     */
    match /users/{userId}/workspaces/{workspaceId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}