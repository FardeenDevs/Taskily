/**
 * @fileoverview Firestore Security Rules for Task Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile information and the workspaces, tasks, and notes
 * that they own. Data validation is relaxed to allow for rapid prototyping,
 * focusing on authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/workspaces/{workspaceId}: Stores workspaces owned by the user.
 * - /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}: Stores tasks within a workspace.
 * - /users/{userId}/workspaces/{workspaceId}/notes/{noteId}: Stores notes within a workspace.
 *
 * Key Security Decisions:
 * - Users can only list workspaces that they own.
 * - Data validation is minimized to focus on authorization.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 * - Workspaces contain an `ownerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the requested userId matches the authenticated user's ID.
     * @deny (get, create, update, delete) if the user is not signed in or the requested userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own workspaces.
     * @path /users/{userId}/workspaces/{workspaceId}
     * @allow (get, list, create, update, delete) if the user is signed in and is the owner of the workspace.
     * @deny (get, list, create, update, delete) if the user is not signed in or is not the owner of the workspace.
     * @principle Enforces document ownership for workspaces.
     */
    match /users/{userId}/workspaces/{workspaceId} {
      allow get: if isSignedIn() && isOwner(userId) && resource.data.ownerId == userId;
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.ownerId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.ownerId == userId;
    }

    /**
     * @description Allows users to read and write their own tasks within a workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}
     * @allow (get, list, create, update, delete) if the user is signed in and is the owner of the parent workspace.
     * @deny (get, list, create, update, delete) if the user is not signed in or is not the owner of the parent workspace.
     * @principle Enforces document ownership for tasks within workspaces.
     */
    match /users/{userId}/workspaces/{workspaceId}/tasks/{taskId} {
      allow get: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow list: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow create: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow update: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow delete: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
    }

    /**
     * @description Allows users to read and write their own notes within a workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/notes/{noteId}
     * @allow (get, list, create, update, delete) if the user is signed in and is the owner of the parent workspace.
     * @deny (get, list, create, update, delete) if the user is not signed in or is not the owner of the parent workspace.
     * @principle Enforces document ownership for notes within workspaces.
     */
    match /users/{userId}/workspaces/{workspaceId}/notes/{noteId} {
      allow get: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow list: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow create: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow update: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
      allow delete: if isSignedIn() && isWorkspaceOwner(userId, workspaceId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource (based on the userId).
     * @param {string} userId - The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource (and that the resource exists).
     * @param {string} userId - The user ID to check against.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is the owner of the workspace.
     * @param {string} userId - The user ID.
     * @param {string} workspaceId - The workspace ID.
     * @return True if the user owns the workspace, false otherwise.
     */
    function isWorkspaceOwner(userId, workspaceId) {
      return exists(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceId))
          && get(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceId)).data.ownerId == request.auth.uid;
    }
  }
}