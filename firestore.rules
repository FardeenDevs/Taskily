/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile data and the workspaces, tasks, and notes
 * associated with those workspaces.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /users/{userId}/workspaces/{workspaceId}: Stores workspaces owned by a user.
 * - /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}: Stores tasks within a workspace.
 * - /users/{userId}/workspaces/{workspaceId}/notes/{noteId}: Stores notes within a workspace.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Users can only read and write workspaces, tasks, and notes they own.
 * - No public listing of users, workspaces, tasks, or notes is allowed.
 * - Schema validation is relaxed in this prototype to allow for rapid iteration. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - Workspaces include an `ownerId` field, which is automatically set to the user's UID on creation.
 * - Tasks and notes inherit authorization from their parent workspace. No additional `ownerId` field is needed on these documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their own profile.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (get) User cannot read other user's profiles.
     * @deny (create) User cannot create profiles for other users.
     * @deny (update) User cannot update other user's profiles.
     * @deny (delete) User cannot delete other user's profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to workspace documents.
     * @path /users/{userId}/workspaces/{workspaceId}
     * @allow (get) User can read their own workspace.
     * @allow (create) User can create a workspace for themselves. The workspace `ownerId` is the creator.
     * @allow (update) User can update their own workspace.
     * @allow (delete) User can delete their own workspace.
     * @deny (get) User cannot read other user's workspaces.
     * @deny (create) User cannot create workspaces for other users.
     * @deny (update) User cannot update other user's workspaces.
     * @deny (delete) User cannot delete other user's workspaces.
     * @principle Enforces document ownership for workspaces.
     */
    match /users/{userId}/workspaces/{workspaceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.ownerId == request.auth.uid;
    }

     /**
      * @description Controls access to task documents within a workspace.
      * @path /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}
      * @allow (get) User can read a task in their workspace.
      * @allow (create) User can create a task in their workspace.
      * @allow (update) User can update a task in their workspace.
      * @allow (delete) User can delete a task in their workspace.
      * @deny (get) User cannot read tasks in other user's workspaces.
      * @deny (create) User cannot create tasks in other user's workspaces.
      * @deny (update) User cannot update tasks in other user's workspaces.
      * @deny (delete) User cannot delete tasks in other user's workspaces.
      * @principle Enforces document ownership for tasks, inheriting from the workspace.
      */
    match /users/{userId}/workspaces/{workspaceId}/tasks/{taskId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function workspaceOwnerId() {
          return get(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceId)).data.ownerId
        }


        allow get: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
        allow update: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
        allow delete: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
    }

    /**
     * @description Controls access to note documents within a workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/notes/{noteId}
     * @allow (get) User can read a note in their workspace.
     * @allow (create) User can create a note in their workspace.
     * @allow (update) User can update a note in their workspace.
     * @allow (delete) User can delete a note in their workspace.
     * @deny (get) User cannot read notes in other user's workspaces.
     * @deny (create) User cannot create notes in other user's workspaces.
     * @deny (update) User cannot update notes in other user's workspaces.
     * @deny (delete) User cannot delete notes in other user's workspaces.
     * @principle Enforces document ownership for notes, inheriting from the workspace.
     */
    match /users/{userId}/workspaces/{workspaceId}/notes/{noteId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function workspaceOwnerId() {
          return get(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceId)).data.ownerId
        }

        allow get: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
        allow update: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
        allow delete: if isSignedIn() && isOwner(userId) && workspaceOwnerId() == request.auth.uid;
    }
  }
}