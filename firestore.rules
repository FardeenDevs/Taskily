/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /users/{userId}/workspaces/{workspaceId}: Stores workspaces owned by the user.
 * - /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}: Stores tasks within a workspace.
 * - /users/{userId}/workspaces/{workspaceId}/notes/{noteId}: Stores notes within a workspace.
 *
 * Key Security Decisions:
 * - User profiles are readable by anyone, but only the owner can modify them.
 * - Workspaces, tasks, and notes are strictly owned by the user. No shared access is allowed.
 * - Listing of workspaces, tasks and notes is allowed only for the owner.
 *
 * Denormalization for Authorization:
 * - The `ownerId` field in the `/users/{userId}/workspaces/{workspaceId}` document is used to enforce ownership without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile and create their profile.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read /users/user123.
     * @deny (get) User with ID 'user456' cannot read /users/user123.
     * @allow (create) User with ID 'user123' can create /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user123' cannot create /users/user123 if request.auth.uid != 'user123'.
     * @allow (update) User with ID 'user123' can update /users/user123.
     * @deny (update) User with ID 'user456' cannot update /users/user123.
     * @allow (delete) User with ID 'user123' can delete /users/user123.
     * @deny (delete) User with ID 'user456' cannot delete /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage their own workspaces.
     * @path /users/{userId}/workspaces/{workspaceId}
     * @allow (get) User with ID 'user123' can read /users/user123/workspaces/workspace456 if they own it.
     * @deny (get) User with ID 'user456' cannot read /users/user123/workspaces/workspace456.
     * @allow (create) User with ID 'user123' can create /users/user123/workspaces/workspace456 if request.resource.data.ownerId == 'user123'.
     * @deny (create) User with ID 'user123' cannot create /users/user123/workspaces/workspace456 if request.resource.data.ownerId != 'user123'.
     * @allow (update) User with ID 'user123' can update /users/user123/workspaces/workspace456 if they own it.
     * @deny (update) User with ID 'user456' cannot update /users/user123/workspaces/workspace456.
     * @allow (delete) User with ID 'user123' can delete /users/user123/workspaces/workspace456 if they own it.
     * @deny (delete) User with ID 'user456' cannot delete /users/user123/workspaces/workspace456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workspaces/{workspaceId} {
      allow get: if isSignedIn() && isWorkspaceOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.ownerId == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.ownerId == userId; // Enforce immutability of ownerId
      allow delete: if isSignedIn() && isOwner(userId) && getWorkspaceOwnerId(userId, workspaceId) == userId;
    }

    /**
     * @description Allows users to manage tasks within their own workspaces.
     * @path /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}
     * @allow (get) User with ID 'user123' can read /users/user123/workspaces/workspace456/tasks/task789 if they own the workspace.
     * @deny (get) User with ID 'user456' cannot read /users/user123/workspaces/workspace456/tasks/task789.
     * @allow (create) User with ID 'user123' can create /users/user123/workspaces/workspace456/tasks/task789 if they own the workspace.
     * @deny (create) User with ID 'user456' cannot create /users/user123/workspaces/workspace456/tasks/task789.
     * @allow (update) User with ID 'user123' can update /users/user123/workspaces/workspace456/tasks/task789 if they own the workspace.
     * @deny (update) User with ID 'user456' cannot update /users/user123/workspaces/workspace456/tasks/task789.
     * @allow (delete) User with ID 'user123' can delete /users/user123/workspaces/workspace456/tasks/task789 if they own the workspace.
     * @deny (delete) User with ID 'user456' cannot delete /users/user123/workspaces/workspace456/tasks/task789.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workspaces/{workspaceId}/tasks/{taskId} {
      allow get: if isSignedIn() && isWorkspaceOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isWorkspaceOwner(userId);
      allow update: if isSignedIn() && isWorkspaceOwner(userId);
      allow delete: if isSignedIn() && isWorkspaceOwner(userId);
    }

    /**
     * @description Allows users to manage notes within their own workspaces.
     * @path /users/{userId}/workspaces/{workspaceId}/notes/{noteId}
     * @allow (get) User with ID 'user123' can read /users/user123/workspaces/workspace456/notes/note789 if they own the workspace.
     * @deny (get) User with ID 'user456' cannot read /users/user123/workspaces/workspace456/notes/note789.
     * @allow (create) User with ID 'user123' can create /users/user123/workspaces/workspace456/notes/note789 if they own the workspace.
     * @deny (create) User with ID 'user456' cannot create /users/user123/workspaces/workspace456/notes/note789.
     * @allow (update) User with ID 'user123' can update /users/user123/workspaces/workspace456/notes/note789 if they own the workspace.
     * @deny (update) User with ID 'user456' cannot update /users/user123/workspaces/workspace456/notes/note789.
     * @allow (delete) User with ID 'user123' can delete /users/user123/workspaces/workspace456/notes/note789 if they own the workspace.
     * @deny (delete) User with ID 'user456' cannot delete /users/user123/workspaces/workspace456/notes/note789.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workspaces/{workspaceId}/notes/{noteId} {
      allow get: if isSignedIn() && isWorkspaceOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isWorkspaceOwner(userId);
      allow update: if isSignedIn() && isWorkspaceOwner(userId);
      allow delete: if isSignedIn() && isWorkspaceOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isTaskOrNoteOwner(userId, workspaceId) {
    let workspace = get(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceId));
    return workspace.data.ownerId == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
  }

  function isWorkspaceOwner(userId) {
      return isSignedIn() && isOwner(userId) && userId == userId;
  }

  function isExistingWorkspaceOwner(userId, workspaceOwnerId) {
    return isSignedIn() && isWorkspaceOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceOwnerId));
  }

  // Helper function to get the workspace owner id from the document.
  function getWorkspaceOwnerId(userId, workspaceId) {
      return get(/databases/$(database)/documents/users/$(userId)/workspaces/$(workspaceId)).data.ownerId;
  }
}