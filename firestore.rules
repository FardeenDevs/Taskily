/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only
 * read and write their own profile data, and only access workspaces, tasks, and notes
 * that belong to them. Data validation is relaxed for rapid prototyping but
 * authorization is strictly enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Each user can only
 *   access their own profile.
 * - /users/{userId}/workspaces/{workspaceId}: Stores workspaces owned by a user.
 * - /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}: Stores tasks
 *   belonging to a specific workspace.
 * - /users/{userId}/workspaces/{workspaceId}/notes/{noteId}: Stores notes
 *   belonging to a specific workspace.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The data model is strictly hierarchical to simplify security rules.
 * - Relaxed data validation allows for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document.
     * @allow (get) User with UID 'user123' can read their profile document.
     * @allow (update) User with UID 'user123' can update their profile document.
     * @allow (delete) User with UID 'user123' can delete their profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile document of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to workspace documents.
     * @path /users/{userId}/workspaces/{workspaceId}
     * @allow (create) User with UID 'user123' can create a workspace.
     * @allow (get) User with UID 'user123' can read a workspace they own.
     * @allow (update) User with UID 'user123' can update a workspace they own.
     * @allow (delete) User with UID 'user123' can delete a workspace they own.
     * @deny (create) User with UID 'user456' cannot create a workspace for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the workspace of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the workspace of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the workspace of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/workspaces/{workspaceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to task documents within a workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/tasks/{taskId}
     * @allow (create) User with UID 'user123' can create a task in their workspace.
     * @allow (get) User with UID 'user123' can read a task in their workspace.
     * @allow (update) User with UID 'user123' can update a task in their workspace.
     * @allow (delete) User with UID 'user123' can delete a task in their workspace.
     * @deny (create) User with UID 'user456' cannot create a task in 'user123's workspace.
     * @deny (get) User with UID 'user456' cannot read a task in 'user123's workspace.
     * @deny (update) User with UID 'user456' cannot update a task in 'user123's workspace.
     * @deny (delete) User with UID 'user456' cannot delete a task in 'user123's workspace.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/workspaces/{workspaceId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to note documents within a workspace.
     * @path /users/{userId}/workspaces/{workspaceId}/notes/{noteId}
     * @allow (create) User with UID 'user123' can create a note in their workspace.
     * @allow (get) User with UID 'user123' can read a note in their workspace.
     * @allow (update) User with UID 'user123' can update a note in their workspace.
     * @allow (delete) User with UID 'user123' can delete a note in their workspace.
     * @deny (create) User with UID 'user456' cannot create a note in 'user123's workspace.
     * @deny (get) User with UID 'user456' cannot read a note in 'user123's workspace.
     * @deny (update) User with UID 'user456' cannot update a note in 'user123's workspace.
     * @deny (delete) User with UID 'user456' cannot delete a note in 'user123's workspace.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/workspaces/{workspaceId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}